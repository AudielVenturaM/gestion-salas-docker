
services:
  db: # Es mejor definir la base de datos primero
    image: postgres:16
    container_name: lion_db # Asigna un nombre claro al contenedor
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # CORRECCIÓN: Las variables de entorno para la imagen oficial de Postgres son POSTGRES_DB, POSTGRES_USER, y POSTGRES_PASSWORD.
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports: # Opcional: solo si necesitas conectar a la BD desde tu PC (fuera de Docker)
      - "5432:5432"

  backend:
    build: ./gestion_salas
    container_name: lion_backend
    # MEJORA: Ejecuta las migraciones antes de iniciar el servidor. Esto asegura que la BD esté lista.
    command: >
      sh -c "python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - ./gestion_salas:/app
    # CORRECCIÓN: Se unificó el bloque 'environment' que estaba duplicado.
    environment:
      - SECRET_KEY=una-llave-secreta-muy-segura-para-desarrollo-no-usar-en-produccion
      - DEBUG=True
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - ALLOWED_HOSTS=backend,localhost,127.0.0.1
    # SOLUCIÓN CLAVE: Añadimos 'depends_on' y 'restart' para solucionar el error de conexión.
    depends_on:
      - db
    restart: unless-stopped # Si el backend falla al iniciar, Docker lo reiniciará automáticamente.

  frontend:
    build: ./frontend-gestion-salas
    container_name: lion_frontend
    ports:
      - "5173:80"
    depends_on:
      - backend

volumes:
  postgres_data:
